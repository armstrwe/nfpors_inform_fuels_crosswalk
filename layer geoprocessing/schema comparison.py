import os, sys

# # Define list_1
# list_1 = [
#     "OBJECTID",
#     "CreatedBy",
#     "Unit",
#     "Region",
#     "Bureau",
#     "Department",
#     "Latitude",
#     "Longitude",
#     "CalculatedAcres",
#     "IsWUI",
#     "InitiationDate",
#     "CompletionDate",
#     "Notes",
#     "LastModifiedBy",
#     "CreatedOnDate",
#     "LastModifiedDate",
#     "Status",
#     "StatusReason",
#     "ActualTreatmentID",
#     "InitiationFiscalYear",
#     "InitiationFiscalQuarter",
#     "CompletionFiscalYear",
#     "CompletionFiscalQuarter",
#     "Class",
#     "Category",
#     "Type",
#     "Durability",
#     "Priority",
#     "FundingSource",
#     "CongressionalDistrictNumber",
#     "County",
#     "State",
#     "EstimatedPersonnelCost",
#     "EstimatedAssetCost",
#     "EstimatedGrantsFixedCost",
#     "EstimatedContractualCost",
#     "EstimatedOtherCost",
#     "EstimatedTotalCost",
#     "LocalApprovalDate",
#     "RegionalApprovalDate",
#     "BureauApprovalDate",
#     "DepartmentApprovalDate",
#     "FundedDate",
#     "EstimatedSuccessProbability",
#     "Feasibility",
#     "IsApproved",
#     "IsFunded",
#     "TribeName",
#     "IsArchived",
#     "Name",
#     "IsPoint",
#     "Agency",
#     "AgencyApprovalDate",
#     "TotalAcres",
#     "IsDepartmentManual",
#     "WBSID",
#     "FundingUnit",
#     "FundingRegion",
#     "FundingAgency",
#     "FundingDepartment",
#     "FundingTribe",
#     "CostCenter",
#     "FunctionalArea",
#     "CostCode",
#     "CancelledDate",
#     "HasGroup",
#     "GroupCount",
#     "UnitID",
#     "VegDeparturePercentageDerived",
#     "VegDeparturePercentageManual",
#     "IsVegetationManual",
#     "IsRTRL",
#     "FundingSubUnit",
#     "FundingUnitType",
#     "IsBIL",
#     "BILFunding",
#     "TreatmentDriver",
#     "ContributedFundingSource",
#     "ContributedNotes",
#     "ContributedPersonnelCost",
#     "ContributedAssetCost",
#     "ContributedGrantsFixedCost",
#     "ContributedContractualCost",
#     "ContributedOtherCost",
#     "ContributedTotalCost",
#     "ContributedCostCenter",
#     "ContributedFunctionalArea",
#     "ContributedCostCode",
#     "Shape_Length",
#     "Shape_Area"
# ]

# # Define list_2
# list_2 = [
#     "OBJECTID",
#     "Name",
#     "EstimatedTreatmentID",
#     "EstimatedActivityID",
#     "ActualTreatmentID",
#     "ActualActivityID",
#     "IsPoint",
#     "ParentID",
#     "ParentObjectID",
#     "IsParentTreatment",
#     "LocalID",
#     "Type",
#     "Category",
#     "Class",
#     "OwnershipUnit",
#     "OwnershipRegion",
#     "OwnershipAgency",
#     "OwnershipDepartment",
#     "CongressionalDistrictNumber",
#     "TribeName",
#     "County",
#     "State",
#     "Latitude",
#     "Longitude",
#     "CalculatedAcres",
#     "Durability",
#     "Priority",
#     "Feasibility",
#     "IsWUI",
#     "IsFunded",
#     "IsApproved",
#     "EstimatedSuccessProbability",
#     "InitiationDate",
#     "InitiationFiscalYear",
#     "InitiationFiscalQuarter",
#     "CompletionDate",
#     "CompletionFiscalYear",
#     "CompletionFiscalQuarter",
#     "CostCenter",
#     "FunctionalArea",
#     "WBS",
#     "CostCode",
#     "FundingSource",
#     "FundingDepartment",
#     "FundingAgency",
#     "FundingRegion",
#     "FundingUnit",
#     "FundingSubUnit",
#     "FundingTribe",
#     "FundingUnitID",
#     "EstimatedPersonnelCost",
#     "EstimatedAssetCost",
#     "EstimatedContractualCost",
#     "EstimatedGrantsFixedCost",
#     "EstimatedOtherCost",
#     "EstimatedTotalCost",
#     "Notes",
#     "LocalApprovalDate",
#     "RegionalApprovalDate",
#     "AgencyApprovalDate",
#     "DepartmentApprovalDate",
#     "FundedDate",
#     "Status",
#     "StatusReason",
#     "IsArchived",
#     "LastModifiedDate",
#     "LastModifiedBy",
#     "CreatedOnDate",
#     "CreatedBy",
#     "CancelledDate",
#     "BILFunding",
#     "VegDeparturePercentageManual",
#     "VegDeparturePercentageDerived",
#     "IsVegetationManual",
#     "TreatmentDriver",
#     "FundingUnitType"
# ]

# # Find items in list_1 that are not in list_2
# list_3 = [item for item in list_1 if item not in list_2]

# # Print list_3 to see the items that are in list_1 but not in list_2
# print(list_3)

# Your updated list1 and list2


list1 = [
    "OBJECTID_1",
    "OBJECTID",
    "CreatedBy",
    "Unit",
    "Region",
    "Bureau",
    "Department",
    "Latitude",
    "Longitude",
    "CalculatedAcres",
    "IsWUI",
    "InitiationDate",
    "CompletionDate",
    "Notes",
    "LastModifiedBy",
    "CreatedOnDate",
    "LastModifiedDate",
    "Status",
    "StatusReason",
    "ActualTreatmentID",
    "ActualActivityID",
    "EstimatedTreatmentID",
    "EstimatedActivityID",
    "InitiationFiscalYear",
    "InitiationFiscalQuarter",
    "CompletionFiscalYear",
    "CompletionFiscalQuarter",
    "Class",
    "Category",
    "Type",
    "Durability",
    "Priority",
    "FundingSource",
    "CongressionalDistrictNumber",
    "County",
    "State",
    "EstimatedPersonnelCost",
    "EstimatedAssetCost",
    "EstimatedGrantsFixedCost",
    "EstimatedContractualCost",
    "EstimatedOtherCost",
    "EstimatedTotalCost",
    "LocalApprovalDate",
    "RegionalApprovalDate",
    "BureauApprovalDate",
    "DepartmentApprovalDate",
    "FundedDate",
    "EstimatedSuccessProbability",  # Updated name
    "Feasibility",
    "IsApproved",
    "IsFunded",
    "TribeName",
    "IsArchived",
    "Name",
    "IsPoint",
    "Agency",
    "AgencyApprovalDate",
    "TotalAcres",
    "IsDepartmentManual",
    "WBSID",
    "FundingUnit",
    "FundingRegion",
    "FundingAgency",
    "FundingDepartment",
    "FundingTribe",
    "CostCenter",
    "FunctionalArea",
    "CostCode",
    "CancelledDate",
    "HasGroup",
    "GroupCount",
    "UnitID",
    "VegDeparturePercentageDerived",
    "VegDeparturePercentageManual",
    "IsVegetationManual",
    "IsRTRL",
    "FundingSubUnit",
    "FundingUnitType",
    "IsBIL",
    "BILFunding",
    "TreatmentDriver",
    "ContributedFundingSource",
    "ContributedNotes",
    "ContributedPersonnelCost",
    "ContributedAssetCost",
    "ContributedGrantsFixedCost",
    "ContributedContractualCost",
    "ContributedOtherCost",
    "ContributedTotalCost",
    "ContributedCostCenter",
    "ContributedFunctionalArea",
    "ContributedCostCode",
    "Shape_Length",
    "Shape_AreaProjectLatitude",
    "ProjectLongitude",
    "AcresMonitored",
    "BILGeneralFunds",
    "BilThinningFunds",
    "BILPrescribedFireFunds",
    "BiLControlLocationsFunds",
    "BilLaborersFunds",
    "GranteeCost",
    "ProjectNotes",
    "BIL Estimated Personnel Cost",
    "BIL Estimated Grants Fixed Costs",
    "BIL Estimated Asset Cost",
    "BIL Estimated Contractual Cost",
    "BIL Estimated Other Cost",
    "Implementation Feasibility",  # Updated name
    "Treatment_Priority",
    "ProjectIsRtrl",
    "GUID"
]

list2 = [
    "Class",
    "Latitude",
    "Longitude",
    "ProjectLatitude",
    "ProjectLongitude",
    "AcresMonitored",
    "CalculatedAcres",
    "BILGeneralFunds",
    "BilThinningFunds",
    "BiLPrescribedFireFunds",
    "BiLControlLocationsFunds",
    "BilLaborersFunds",
    "BIL_Estimated_Personnel_Cost",
    "BIL_Estimated_Asset_Cost",
    "BIL_Estimated_Contractual_Cost",
    "BIL_Estimated_Grants_Fixed_Costs",
    "BIL_Estimated_Other_Cost",
    "IsPoint",
    "FundingSource",
    "BILFunding",
    "Notes",
    "ProjectNotes",
    "EstimatedTotalCost",
    "Category",
    "EstimatedPersonnelCost",
    "EstimatedAssetCost",
    "EstimatedContractualCost",
    "EstimatedGrantsFixedCost",
    "EstimatedOtherCost",
    "EstimatedTreatmentID",
    "EstimatedActivityID",
    "IsRTRL",
    "ProjectIsRtrl"
]

# Create list3 containing values from list2 that are not in list1
list3 = [value for value in list2 if value not in list1]

# Output list3
print(list3)
